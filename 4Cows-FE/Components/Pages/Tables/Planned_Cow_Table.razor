@page "/geplante_Kuh_Daten"
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@using _4Cows_FE.Components._4CowsComponent
@using _4Cows_FE.Components._4CowsComponent.Dialogs
@inject PCowTreatmentService pCowTreatmentService
@inject MedicineService medicineService
@inject CowService cowService
@inject WhereHowService WhereHowService

<MudGrid Justify="Justify.FlexEnd">
    <MudSwitch @bind-Value="isSimpleView" Label="Simple Ansicht" UncheckedColor="Color.Info" Color="Color.Primary" />
    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Color="Color.Secondary" Size="Size.Large" OnClick="OpenPlannedDialog"></MudIconButton>
</MudGrid>

<MudTable Items="@Planned_Treatments" Hover="true" Striped="@true" Filter="(Func<PlannedCowTreatment, bool>)FilterFunc1Planned" @bind-SelectedItem="selectedPlannedCow">
    
    <ToolBarContent>
        @if (!isSimpleView)
        {
            <MudText Class="table-Header" Typo="Typo.h3">geplante Kuh Behandlungen</MudText>
            <MudSpacer/>
            <MudTextField @bind-Value="plannedCowString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        }
    </ToolBarContent>
    
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<PlannedCowTreatment, object>(x=>cowService.GetCollarNumberByEarTagNumber(x.EarTagNumber))">Halsbandnummer</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<PlannedCowTreatment, object>(x=>x.EarTagNumber)">Ohrmarkennummer</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<PlannedCowTreatment, object>(x=>x.MedicineId)">Medikament</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<PlannedCowTreatment, object>(x=> WhereHowService.GetWhereHowNameById(x.WhereHowId))">Wie/Wo</MudTableSortLabel></MudTh>
)
        @if (!isSimpleView)
        {
            <MudTh><MudTableSortLabel SortBy="new Func<PlannedCowTreatment, object>(x=>x.AdministrationDate)">Datum</MudTableSortLabel></MudTh>
            <MudTh><MudTableSortLabel SortBy="new Func<PlannedCowTreatment, object>(x=>x.MedicineDosage)">Menge</MudTableSortLabel></MudTh>
        }
        
        <MudTh>Behandelt</MudTh>
        <MudTh></MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd Style="" DataLabel="Halsbandnummer">@cowService.GetCollarNumberByEarTagNumber(context.EarTagNumber)</MudTd>
        <MudTd DataLabel="Ohrmarkennummer">@(!isSimpleView ? @context.EarTagNumber : @context.EarTagNumber.Substring(context.EarTagNumber.Length - 5))</MudTd>
        <MudTd DataLabel="Medikament">@medicineService.GetMedicineNameById(context.MedicineId)</MudTd>
        <MudTd DataLabel="Wie/Wo">@WhereHowService.GetWhereHowNameById(context.WhereHowId)</MudTd>

        @if (!isSimpleView)
        {
            <MudTd DataLabel="Datum">@context.AdministrationDate.ToString("dd.MM.yyyy")</MudTd>
            <MudTd DataLabel="Menge">@context.MedicineDosage</MudTd>
        }
        <MudTd><MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => AddCowTreatment(context))">Behandlung abschließen</MudButton></MudTd>
        <MudTd><MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => RemovePlannedCowDialog(context))">Behandlung entfernen</MudButton></MudTd>
    </RowTemplate>
    
    <PagerContent>
        @if (!isSimpleView)
        {
            <MudTablePager RowsPerPageString="Behandlungen pro Seite" PageSizeOptions="new int[] { 25, 50, 100 }"/>
        }
    </PagerContent>
    
    </MudTable>

@code {
    private string plannedCowString = "";
    public PlannedCowTreatment selectedPlannedCow = null;
    private IEnumerable<PlannedCowTreatment> Planned_Treatments = new List<PlannedCowTreatment>();
    private bool isSimpleView = false;
    private bool FilterFunc1Planned(PlannedCowTreatment Treatment_Cow) => cowService.FilterFuncCow(Treatment_Cow.EarTagNumber, plannedCowString);

    protected override async Task OnInitializedAsync()
    {
        await pCowTreatmentService.GetAllDataAsync();
        Planned_Treatments = pCowTreatmentService.Treatments.Values;
    }

    private async Task OpenPlannedDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var result = DialogService.Show<Add_Planned_Cow_Treatment_Dialog>("", options);
        var resultData = await result.Result;

        if (!resultData.Canceled)
        {
            await pCowTreatmentService.GetAllDataAsync();
            Planned_Treatments = pCowTreatmentService.Treatments.Values;
        }
        
    }

    async Task AddCowTreatment(PlannedCowTreatment Planned_Cow_Treatment)
    {
        DialogResult result = null;
        if (!isSimpleView)
        {
            var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, NoHeader = true };
            var parametersGeneric = new DialogParameters<GenericDialog> { { x => x.HeaderText, "Speichern" }, { x => x.Description, "Wollen Sie die Behandlung wirklich Speichern?" }, { x => x.AcceptButtonText, "Ja" }, { x => x.CancelButtonText, "Nein" }, { x => x.ColorScheme, Color.Success } };
            var dialog = await DialogService.ShowAsync<GenericDialog>("",parametersGeneric, options);
            result = await dialog.Result;
        }
        
        if(isSimpleView || result.Data != null)
        {
            if (isSimpleView || ((bool)result.Data && result.Data != null))
            {
                var Cow_Treatment = new CowTreatment();
                Cow_Treatment.EarTagNumber = Planned_Cow_Treatment.EarTagNumber;
                Cow_Treatment.AdministrationDate = Planned_Cow_Treatment.AdministrationDate;
                Cow_Treatment.MedicineDosage = Planned_Cow_Treatment.MedicineDosage;
                Cow_Treatment.MedicineId = Planned_Cow_Treatment.MedicineId;
                Cow_Treatment.WhereHowId = Planned_Cow_Treatment.WhereHowId;
                var options1 = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
                var parameters = new DialogParameters<Add_Cow_Treatment_Dialog> { { x => x.Cow_Treatment, Cow_Treatment } };
                await DialogService.ShowAsync<Add_Cow_Treatment_Dialog>("", parameters, options1);
                await pCowTreatmentService.RemoveByIDAsync(Planned_Cow_Treatment.PlannedCowTreatmentId);
                Snackbar.Add("Speichern abgeschlossen", Severity.Success);

            }
            else
            {
                Snackbar.Add("Löschen abgebrochen", Severity.Warning);
            }
        }

        StateHasChanged();
    }

    async Task RemovePlannedCowDialog(PlannedCowTreatment Planned_Cow_Treatment)
    {
        var options = new DialogOptions {MaxWidth = MaxWidth.Medium, FullWidth = true, NoHeader = true };
        var paramters = new DialogParameters<GenericDialog> { { x => x.HeaderText, "Löschen" }, { x => x.Description, "Wollen Sie die Behandlung wirklich löschen?" }, { x => x.AcceptButtonText, "Ja" }, { x => x.CancelButtonText, "Nein" }, { x => x.ColorScheme, Color.Error } };

        var dialog = await DialogService.ShowAsync<Confirm_Planned_Treatment_Delete>("", options);
        var result = await dialog.Result;
        if (result.Data == null)
        {

        }
        else
        {

            if ((bool)result.Data && result.Data != null)
            {
                await pCowTreatmentService.RemoveByIDAsync(Planned_Cow_Treatment.PlannedCowTreatmentId);
                Snackbar.Add("Löschen abgeschlossen", Severity.Success);
            }
            else
            {
                Snackbar.Add("Löschen abgebrochen", Severity.Warning);
            }
            StateHasChanged();
        }
    }
}
