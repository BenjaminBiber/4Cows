@page "/Klauen_Daten"
@inject IDialogService DialogService
@using _4Cows_FE.Components._4CowsComponent
@using _4Cows_FE.Components._4CowsComponent
@using _4Cows_FE.Components._4CowsComponent.Dialogs
@using BB_Cow.Class
@using BB_Cow.Services
@using OfficeOpenXml
@using OfficeOpenXml.Style
@inject ClawTreatmentService clawTreatmentService
@inject CowService cowService
@inject IJSRuntime JS


<MudGrid Justify="Justify.FlexEnd">
    <MudTooltip Text="Behandlungen als Excel exportieren">
        <MudIconButton Icon="@Icons.Material.Filled.Download" Color="Color.Secondary" Size="Size.Large" OnClick="DownloadFile"></MudIconButton>
    </MudTooltip>
    <MudTooltip Text="Neue Behandlung hinzufügen">
    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Color="Color.Secondary" Size="Size.Large" OnClick="OpenClawDialog"></MudIconButton>
    </MudTooltip>
</MudGrid>

<MudTable Elevation="5" Items="@Treatment_Claws" Hover="true" Striped="@true" Filter="new Func<ClawTreatment,bool>(ClawFilterFunc1)" @bind-SelectedItem="selectedClaw">
    <ToolBarContent>
        <MudText Typo="Typo.h3">Klauen Behandlungen</MudText>
        <MudSpacer/>
        <MudTextField @bind-Value="searchClaw" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<int, object>(x=>x)">Halsbandnummer</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ClawTreatment, object>(x=>x.TreatmentDate)">Datum</MudTableSortLabel></MudTh>
        <MudTh></MudTh>

    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Halsbandnummer">@cowService.GetCollarNumberByEarTagNumber(context.EarTagNumber)</MudTd>
            <MudTd DataLabel="Datum">@context.TreatmentDate.ToString("dd.MM.yyyy")</MudTd>
            <MudTd><MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="@(() => OpenClawInformation(context))">Behandlung öffnen</MudButton></MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="Behandlungen pro Seite" PageSizeOptions="new int[]{25, 50, 100}" />
        </PagerContent>
    </MudTable>
@code {
    private ClawTreatment selectedClaw = null;
    private string searchClaw = "";
    private List<ClawTreatment> Treatment_Claws = new List<ClawTreatment>();

    protected override async Task OnInitializedAsync()
    {
        await clawTreatmentService.GetAllDataAsync();
        Treatment_Claws = clawTreatmentService.GetClawTreatments();
    }
    private bool ClawFilterFunc1(ClawTreatment Treatment_Cow) => FilterFuncClaw(Treatment_Cow, searchClaw);

    private bool FilterFuncClaw(ClawTreatment Treatment_Cow, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (cowService.GetCollarNumberByEarTagNumber(Treatment_Cow.EarTagNumber).ToString() == searchString)
            return true;
        return false;
    }

    private async Task OpenClawInformation(ClawTreatment Claw_Treatment)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        await clawTreatmentService.GetAllDataAsync();
        var parameters = new DialogParameters<Show_Claw_Treatment_Dialog> { { x => x.Claw_Treatment, Claw_Treatment } };
        DialogService.Show<Show_Claw_Treatment_Dialog>("", parameters, options);
    }

    private void OpenClawDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<Add_Claw_Treatment_Dialog>("", options);
    }


    private async Task DownloadFile()
    {
        var excelData = ExportDataToExcel();

        var base64 = Convert.ToBase64String(excelData);

        await JS.InvokeVoidAsync("downloadFile", $"Klauenbehandlungen Export {DateTime.Now.ToString("dd-MM-yyyy")}.xlsx", base64);
    }

    private byte[] ExportDataToExcel()
    {
        using (var package = new ExcelPackage())
        {
            var worksheet = package.Workbook.Worksheets.Add("Sheet1");

            string[] headers = { "Halsbandnummer","Ohrenmarkennummer", "Datum", "Behandlung LV", "Verband LV", "Klotz LV",
                         "Behandlung RV", "Verband RV", "Klotz RV", "Behandlung LH",
                         "Verband LH", "Klotz LH", "Behandlung RH", "Verband RH",
                         "Klotz RH", "Wurde Verband entfernt?" };

            for (int i = 0; i < headers.Length; i++)
            {
                worksheet.Cells[1, i + 1].Value = headers[i];
                worksheet.Cells[1, i + 1].Style.Fill.PatternType = ExcelFillStyle.Solid;
                worksheet.Cells[1, i + 1].Style.Fill.BackgroundColor.SetColor(System.Drawing.ColorTranslator.FromHtml(MudBlazor.Color.Primary.ToString()));
                worksheet.Cells[1, i + 1].Style.Font.Bold = true;
                worksheet.Cells[1, i + 1].Style.Font.Size = 12;
            }

            for (int i = 0; i < Treatment_Claws.Count; i++)
            {
                worksheet.Cells[i + 3, 1].Value = Treatment_Claws[i].EarTagNumber; 
                worksheet.Cells[i + 3, 2].Value = cowService.GetCollarNumberByEarTagNumber(Treatment_Claws[i].EarTagNumber); 
                worksheet.Cells[i + 3, 3].Value = Treatment_Claws[i].TreatmentDate;
                worksheet.Cells[i + 3, 4].Value = Treatment_Claws[i].ClawFindingLV;
                worksheet.Cells[i + 3, 5].Value = Treatment_Claws[i].BandageLV ? "Verband" : "Kein Verband";
                worksheet.Cells[i + 3, 6].Value = Treatment_Claws[i].BlockLV ? "Klotz" : "Kein Klotz";
                worksheet.Cells[i + 3, 7].Value = Treatment_Claws[i].ClawFindingRV;
                worksheet.Cells[i + 3, 8].Value = Treatment_Claws[i].BandageRV ? "Verband" : "Kein Verband";
                worksheet.Cells[i + 3, 9].Value = Treatment_Claws[i].BlockRV ? "Klotz" : "Kein Klotz";
                worksheet.Cells[i + 3, 10].Value = Treatment_Claws[i].ClawFindingLH;
                worksheet.Cells[i + 3, 11].Value = Treatment_Claws[i].BandageLH ? "Verband" : "Kein Verband";
                worksheet.Cells[i + 3, 12].Value = Treatment_Claws[i].BlockLH ? "Klotz" : "Kein Klotz";
                worksheet.Cells[i + 3, 13].Value = Treatment_Claws[i].ClawFindingRH;
                worksheet.Cells[i + 3, 14].Value = Treatment_Claws[i].BandageRH ? "Verband" : "Kein Verband";
                worksheet.Cells[i + 3, 15].Value = Treatment_Claws[i].BlockRH ? "Klotz" : "Kein Klotz";
                worksheet.Cells[i + 3, 16].Value = Treatment_Claws[i].IsBandageRemoved ? "Ja" : "Nein";

                if (Treatment_Claws[i].IsBandageRemoved)
                {
                    worksheet.Cells[i + 3, 15].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[i + 3, 15].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightGreen);
                }
                else
                {
                    worksheet.Cells[i + 3, 15].Style.Fill.PatternType = ExcelFillStyle.Solid;
                    worksheet.Cells[i + 3, 15].Style.Fill.BackgroundColor.SetColor(System.Drawing.Color.LightPink);
                }
            }

            for (int i = 1; i <= headers.Length; i++)
            {
                worksheet.Column(i).Width = 20;
            }
            worksheet.Column(15).Width = 30;

            return package.GetAsByteArray();
        }
    }
}
