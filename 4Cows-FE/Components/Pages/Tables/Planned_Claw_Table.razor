@page "/geplante_Klauen_Daten"
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@using _4Cows_FE.Components._4CowsComponent
@using _4Cows_FE.Components._4CowsComponent.Dialogs
@inject PClawTreatmentService pClawTreatmentService
@inject ClawTreatmentService clawTreatmentService
@inject CowService cowService


<MudGrid Justify="Justify.FlexEnd">
    <MudIconButton Icon="@Icons.Material.Filled.AddCircle" Color="Color.Secondary" Size="Size.Large" OnClick="OpenPlannedClawDialog"></MudIconButton>
</MudGrid>

<MudTable Elevation="5" Items="@Treatment_Claws" Hover="true" Striped="@true" Filter="new Func<PlannedClawTreatment,bool>(ClawFilterFunc1)" @bind-SelectedItem="selectedClaw">
    <ColGroup>
        <col />
        <col />
        <col style="width:15%" />
        <col style="width:15%" />
        <col style="width:15%" />
    </ColGroup>
    <ToolBarContent>
        <MudText Typo="Typo.h3" Class="mb-3 table-Header">geplante Klauen Behandlungen</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="searchClaw" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<CowTreatment, object>(x=>cowService.GetCollarNumberByEarTagNumber(x.EarTagNumber))">Halsbandnummer</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<PlannedClawTreatment, object>(x=>x.Desciption)">Beschreibung</MudTableSortLabel></MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>
        <MudTh></MudTh>


    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Halsbandnummer">@cowService.GetCollarNumberByEarTagNumber(context.EarTagNumber)</MudTd>
        <MudTd DataLabel="Beschreibung">@context.Desciption</MudTd>
        <MudTd><MudButton Color="Color.Tertiary" Variant="Variant.Filled" OnClick="@(() => OpenClawInformation(context))">Behandlung öffnen</MudButton></MudTd>
        <MudTd><MudButton Color="Color.Secondary" Variant="Variant.Filled" OnClick="@(() => AddClawTreatment(context))">Behandlung abschließen</MudButton></MudTd>
        <MudTd><MudButton Color="Color.Tertiary" Variant="Variant.Filled" OnClick="@(() => RemovePlannedClawDialog(context))">Behandlung entfernen</MudButton></MudTd>

        </RowTemplate>
        <PagerContent>
            <MudTablePager RowsPerPageString="Behandlungen pro Seite" PageSizeOptions="new int[]{25, 50, 100}" />
        </PagerContent>
    </MudTable>

@code {
    private PlannedClawTreatment selectedClaw = null;
    private string searchClaw = "";
    private IEnumerable<PlannedClawTreatment> Treatment_Claws = new List<PlannedClawTreatment>();

    protected override async Task OnInitializedAsync()
    {
        await pClawTreatmentService.GetAllDataAsync();
        Treatment_Claws = pClawTreatmentService.Treatments.Values;
    }
    private bool ClawFilterFunc1(PlannedClawTreatment Treatment_Cow) => cowService.FilterFuncCow(Treatment_Cow.EarTagNumber, searchClaw);
    
    private async Task OpenClawInformation(PlannedClawTreatment Claw_Treatment)
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        await clawTreatmentService.GetAllDataAsync();
        var parameters = new DialogParameters<Show_Planned_Treatment_Claw_Dialog> { { x => x.Planned_Claw_Treatment, Claw_Treatment } };
        DialogService.Show<Show_Planned_Treatment_Claw_Dialog>("", parameters, options);
    }

    async Task AddClawTreatment(PlannedClawTreatment Planned_Claw_Treatment)
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, NoHeader = true};
        var parametersGenericDialog = new DialogParameters<GenericDialog> { { x => x.HeaderText, "Speichern" }, { x => x.Description, "Wollen Sie die Behandlung wirklich Speichern?" }, { x => x.AcceptButtonText, "Ja" }, { x => x.CancelButtonText, "Nein" }, { x => x.ColorScheme, Color.Success } };
        var dialog = await DialogService.ShowAsync<GenericDialog>("", parametersGenericDialog, options);
        var result = await dialog.Result;
        if (result.Data == null)
        {

        }
        else
        {

            if ((bool)result.Data && result.Data != null)
            {
                var Claw_Treatment = new ClawTreatment();
                Claw_Treatment.EarTagNumber = Planned_Claw_Treatment.EarTagNumber;
                Claw_Treatment.TreatmentDate = DateTime.Now;
                var options1 = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
                var parameters = new DialogParameters<Add_Claw_Treatment_Dialog> { { x => x.Claw_Treatment, Claw_Treatment } };
                DialogService.Show<Add_Claw_Treatment_Dialog>("", parameters, options1);
                await pClawTreatmentService.RemoveByIDAsync(Planned_Claw_Treatment.PlannedClawTreatmentId);
                Snackbar.Add("Speichern abgeschlossen", Severity.Success);

            }
            else
            {
                Snackbar.Add("Löschen abgebrochen", Severity.Warning);
            }
        }

        StateHasChanged();
    }

    private void OpenPlannedClawDialog()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, NoHeader=true };
        DialogService.Show<Add_Planned_Claw_Treatment_Dialog>("", options);
    }

    async Task RemovePlannedClawDialog(PlannedClawTreatment Planned_Claw_Treatment)
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true };
        var parameters = new DialogParameters<GenericDialog> { { x => x.HeaderText, "Löschen" }, { x => x.Description, "Wollen Sie die Behandlung wirklich Löschen?" }, { x => x.AcceptButtonText, "Ja" }, { x => x.CancelButtonText, "Nein" }, { x => x.ColorScheme, Color.Error } };
        var dialog = await DialogService.ShowAsync<GenericDialog>("",parameters, options);
        var result = await dialog.Result;
        if (result.Data == null)
        {

        }
        else
        {

            if ((bool)result.Data && result.Data != null)
            {
                await pClawTreatmentService.RemoveByIDAsync(Planned_Claw_Treatment.PlannedClawTreatmentId);
                Snackbar.Add("Löschen abgeschlossen", Severity.Success);
            }
            else
            {
                Snackbar.Add("Löschen abgebrochen", Severity.Warning);
            }
            StateHasChanged();
        }
    }

}
