@page "/"
@inject IDialogService DialogService
@inject IJSRuntime JSRuntime
@using _4Cows_FE.Components._4CowsComponent.Dialogs
@using _4Cows_FE.Components._4CowsComponent
@inject ISnackbar Snackbar
@inject CowTreatmentService cowTreatmentService
@inject PCowTreatmentService pCowTreatmentService
@inject PClawTreatmentService pClawTreatmentService
@inject ClawTreatmentService clawTreatmentService
@inject MedicineService medicineService
@inject CowService cowService

<div id="Index_Top">
    <div id="KPI_Div">
        @foreach (var entry in KPIs)
        {
            <div class="KPI-Element">
                <KPI_Component Link="@entry.Value.Item1" Value="@entry.Value.Item2" Header="@entry.Key"></KPI_Component>
            </div>
        }
    </div>
    
    <div id="Action_Div">
        <MudButton StartIcon="@Icons.Material.Filled.BackupTable" Style="height: 5em;" IconColor="Color.Surface" Align="Align.Center" Variant="Variant.Filled" Color="Color.Tertiary" FullWidth="true" OnClick="OpenCowDialog">Kuh Behandlung hinzufügen</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Construction" Style="height: 5em;" IconColor="Color.Surface" Align="Align.Center" Variant="Variant.Filled" Color="Color.Secondary" FullWidth="true" OnClick="OpenPlannedDialog">geplante Kuh Behandlung hinzufügen</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Pets" Style="height: 5em;" IconColor="Color.Surface" Align="Align.Center" Variant="Variant.Filled" Color="Color.Tertiary" FullWidth="true" OnClick="OpenClawDialog">Klauen Behandlung hinzufügen</MudButton>
        <MudButton StartIcon="@Icons.Material.Filled.Plumbing" Style="height: 5em;" IconColor="Color.Surface" Align="Align.Center" Variant="Variant.Filled" Color="Color.Secondary" FullWidth="true" OnClick="OpenPlannedClawDialog">geplante Klauen Behandlung hinzufügen</MudButton>
    </div>
</div>
<div id="Chart_Div">
    
    <div id="Chart_Div_One">
        <MudPaper Elevation="5" Style="height: 100%; padding: 1%; display: flex; flex-direction: column; align-items: flex-end" id="Chart_One_Paper">
            <div style="display: flex; justify-content: flex-end; width: 100%; position: fixed; z-index: 99">
                <MudIconButton OnClick="OpenChartEditor" Class="Clickable" Icon="@Icons.Material.Filled.Edit" Size="Size.Medium" aria-label="edit"></MudIconButton>
                <MudIconButton OnClick="OpenYearChangeDialog" Class="Clickable" Icon="@Icons.Material.Filled.DateRange" Size="Size.Medium" aria-label="Date"></MudIconButton>
            </div>
            <div style="position: relative; height: 100%; width: 100%;">
                <canvas id="CowChart"></canvas>
            </div>
        </MudPaper>
    </div>
    <div id="Chart_Div_Two">
        <MudPaper Elevation="5" Style="height: 100%; padding: 1%; display: flex; flex-direction: column; align-items: flex-end" id="Chart_two_Paper">
            <div style="height: 100%; width: 100%;">
                <canvas id="ClawChart"></canvas>
            </div>
        </MudPaper>
    </div>
</div>

@code{

    private Dictionary<string, (string, string)> KPIs = [];
    
    public List<CowTreatment> CowList = [];
    public List<ClawTreatment> ClawList = [];
    public List<PlannedCowTreatment> Planned_CowList = [];
    public List<PlannedClawTreatment> Planned_ClawList = [];
    public List<int> _selectedMedicines = new List<int>();
    private int _selectedYear = DateTime.Now.Year;
    bool IsBarChart = false;
    
    protected override async Task OnInitializedAsync()
    {
        await GetLists();
        await GetKPIs();
    }

    private async Task GetLists()
    {
        await cowTreatmentService.GetAllDataAsync();
        await clawTreatmentService.GetAllDataAsync();
        await pCowTreatmentService.GetAllDataAsync();
        await pClawTreatmentService.GetAllDataAsync();
        await medicineService.GetAllDataAsync();
        await cowService.GetAllDataAsync();
        
        CowList = cowTreatmentService.Treatments.Values.ToList();
        ClawList = clawTreatmentService.Treatments.Values.ToList();
        Planned_CowList = pCowTreatmentService.Treatments.Values.ToList();
        Planned_ClawList = pClawTreatmentService.Treatments.Values.ToList();
    }

    private async Task OpenChartEditor()
    { 
        var parameters = new DialogParameters<ChartEditorDialog> { { x => x.Medicines, _selectedMedicines } };

        var options = new DialogOptions()
        {
            MaxWidth = MaxWidth.Medium,
            FullWidth = true,
            BackdropClick = false
        };
        var dialog = await DialogService.ShowAsync<ChartEditorDialog>("Diagramm bearbeiten", parameters, options);
       
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if(result.Data is HashSet<int> selectedMedicines && result.Data != null)
            {
                 _selectedMedicines = selectedMedicines.ToList();
                 
                 await JSRuntime.InvokeVoidAsync("destroyExistingChart", "CowChart");
                 if(_selectedMedicines.Count == medicineService.GetMedicineNames().Distinct().ToList().Count)
                 {
                     await InitilizeLineChartAsync("CowChart", "Kuh Behandlungen", cowTreatmentService.GetCowTreatmentChartData());
                 }
                 else
                 {
                     await InitilizeBarChartAsync(_selectedMedicines);
                 }
            }
        }
    }
    
    private async Task GetKPIs()
    {
        GetTotalCowTreatments();
        GetTotalClawTreatments();
        GetTotalPlannedCowTreatments();
        GetTotalPlannedClawTreatments();
        GetAmountOfBandages();
        GetMostUsedMedicine();
        GetMostFoundClawDisease();
        GetCowWithMostClawTreatments();
    }

    private void GetCowWithMostClawTreatments()
    {
        KPIs.Add("Kuh mit den meisten Klauenbehandlungen:", ("/Klauen_Daten", cowService.GetCollarNumberByEarTagNumber((ClawList.GroupBy(obj => obj.EarTagNumber)
            .OrderByDescending(group => group.Count())
            .Select(group => group.Key)
            .FirstOrDefault() ?? "0")).ToString()));
    }
    
    private void GetMostFoundClawDisease()
    {
        KPIs.Add("Meist behandelte Klauenfund:", ("/Klauen_Daten", (ClawList
            .SelectMany(obj => new[] { obj.ClawFindingLH, obj.ClawFindingLV, obj.ClawFindingRH, obj.ClawFindingRV })
            .Where(str => str != "Pflege")
            .GroupBy(str => str)
            .OrderByDescending(group => group.Count())
            .Select(group => group.Key)
            .FirstOrDefault() ?? "0").ToString()));
    }
    
    private void GetMostUsedMedicine()
    {
        if (medicineService.Medicines.Any())
        {
            KPIs.Add("Meist benutztes Medikament:", ("/Kuh_Daten", medicineService.GetMedicineNameById(CowList.GroupBy(obj => obj.MedicineId)
                .OrderByDescending(group => group.Count())
                .Select(group => group.Key)
                .FirstOrDefault()).ToString()));
        }
    }
    
    private void GetAmountOfBandages()
    {
        KPIs.Add("Verbände:", ("/Klauen_Daten", ClawList.Count(x => (x.BandageLH || x.BandageLV || x.BandageRV || x.BandageRH) && !x.IsBandageRemoved).ToString()));
    }
    
    private void GetTotalCowTreatments()
    {
        KPIs.Add("Kuh Behandlungen:", ("/Kuh_Daten", CowList.Count.ToString()));
    }
    
    private void GetTotalPlannedCowTreatments()
    {
        KPIs.Add("geplante Kuh Behandlungen:", ("/geplante_Kuh_Daten", Planned_CowList.Count.ToString()));
    }
    
    private void GetTotalClawTreatments()
    {
        KPIs.Add("Klauen Behandlungen:", ("/Klauen_Daten", ClawList.Count.ToString()));
    }
    
    private void GetTotalPlannedClawTreatments()
    {
        KPIs.Add("geplante Klauen Behandlungen:", ("/geplante_Klauen_Daten", Planned_ClawList.Count.ToString()));
    }

    private void OpenPlannedDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<Add_Planned_Cow_Treatment_Dialog>("", options);
    }

    private void OpenCowDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<Add_Cow_Treatment_Dialog>("", options);
    }

    private void OpenClawDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<Add_Claw_Treatment_Dialog>("", options);
    }

    private void OpenPlannedClawDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true, CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        DialogService.Show<Add_Planned_Claw_Treatment_Dialog>("", options);
    }

    private async Task InitilizeLineChartAsync(string ChartName, string _label, int[] _data)
    {
        await GetLists();

        var config = new
        {
            type = "line",
            data = new
            {
                labels = new[] 
                { 
                    "Januar", "Februar", "März", "April", "Mai", "Juni", 
                    "Juli", "August", "September", "Oktober", "November", "Dezember" 
                },
                datasets = new[] 
                {
                    new
                    {
                        label = _label,
                        data = _data,
                        backgroundColor = "#619B98", 
                        borderColor = "#60ADC9",
                        borderWidth = 2
                    }
                }
            },
            options = new
            {
                scales = new
                {
                    y = new
                    {
                        beginAtZero = true,
                        stacked = true
                    },
                    x = new
                    {
                        stacked = true
                    }
                },
                interaction = new
                {
                    intersect = false
                },
                plugins = new
                {
                    legend = new
                    {
                        onClick = "function() {}" 
                    }
                },
                responsive = true,
                maintainAspectRatio = false,
            }
        };


        await JSRuntime.InvokeVoidAsync("renderChart", ChartName, config);
    }
    
    private async Task InitilizeBarChartAsync(List<int> Medicines, int? year = null)
    {
        if (!year.HasValue)
        {
            year = DateTime.Now.Year;
        }
        await GetLists();
        
        List<dynamic> test = [];
        var colors = GenerateColorDictionary();
        
        foreach (var medicine in Medicines)
        {
            var stringMedicine = medicineService.GetMedicineNameById(medicine);
            if (!string.IsNullOrEmpty(stringMedicine))
            {
                var color = colors.FirstOrDefault(x => !x.Value).Key;
                colors[color] = true;
                test.Add(new {
                    label = medicine,
                    data = cowTreatmentService.GetCowTreatmentMedicineChartData(medicine, year),
                    backgroundColor = new[] { color },
                    borderColor = new[] { MudBlazor.Color.Primary.ToString() },
                    borderWidth = 2
                });
            }
        }
        
        var config = new
        {
            type = "bar",
            data = new
            {
                labels = new[] { "Januar", "Februar", "März", "April", "Mai", "Juni", "Juli", "August", "September", "Oktober", "November", "Dezember" },
                datasets = test.ToArray()
            },
            options = new
            {
                scales = new
                {
                    y = new
                    {
                        beginAtZero = true,
                        stacked = true
                    }, 
                    x = new
                    {
                        stacked = true
                    }
                },
                interaction = new
                {
                    intersect = false
                },
                plugins = new
                {
                    legend = new
                    {
                        onClick = "function() {}" 
                    }
                }
            }
            
        };

        await JSRuntime.InvokeVoidAsync("renderChart", "CowChart", config);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await InitilizeLineChartAsync("CowChart", "Kuh Behandlungen", cowTreatmentService.GetCowTreatmentChartData());
            await InitilizeLineChartAsync("ClawChart", "Klauen Behandlungen", clawTreatmentService.GetClawTreatmentChartData());
        }
    }

    private Dictionary<string, bool> GenerateColorDictionary()
    {
        var baseColors = new List<string>
        {
            "#8DC2B0",
            "#619B98",
            "#60ADC9"
        };

        var colorDictionary = new Dictionary<string, bool>();

        foreach (var color in baseColors)
        {
            colorDictionary[color] = false; 
        }

        var random = new Random();
        while (colorDictionary.Count < 33) 
        {
            var newColor = GenerateSimilarHexColor(random);
            if (!colorDictionary.ContainsKey(newColor))
            {
                colorDictionary[newColor] = false;
            }
        }

        return colorDictionary;
    }

    string GenerateSimilarHexColor(Random random)
    {
        int r = random.Next(90, 150);  
        int g = random.Next(140, 200); 
        int b = random.Next(160, 220); 

        return $"#{r:X2}{g:X2}{b:X2}";
    }

    private async Task OpenYearChangeDialog()
    {
        var parameters = new DialogParameters<ChartDateDialog> { { x => x.Year, _selectedYear } };

        var dialog = await DialogService.ShowAsync<ChartDateDialog>("Diagramm bearbeiten", parameters);
       
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            if(result.Data is int year && result.Data != null)
            {
                _selectedYear = year;
                 
                await JSRuntime.InvokeVoidAsync("destroyExistingChart", "CowChart");
                if(!IsBarChart)
                {
                    await InitilizeLineChartAsync("CowChart", "Kuh Behandlungen", cowTreatmentService.GetCowTreatmentChartData(year));
                }
                else
                {
                    await InitilizeBarChartAsync(_selectedMedicines, year);
                }
            }
        }
    }
}