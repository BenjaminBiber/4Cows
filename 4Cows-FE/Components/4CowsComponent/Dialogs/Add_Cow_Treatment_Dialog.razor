@inject ISnackbar Snackbar
@inject CowTreatmentService cowTreatmentService
@inject CowService cowService
@inject MedicineService medicineService

<MudDialog>
    <DialogContent>
            <MudStack>
                <MudText Align="Align.Center" Typo="Typo.h3">Kuh Behandlung hinzufügen</MudText>

            <MudGrid>
                @foreach (var number in numbers)
                {
                    <MudItem xs="12">
                        <MudNumericField Immediate="true" @bind-Value="number.Value" TextChanged="@((string s) => GetEarNumber(number))" Label="Halsbandnummer:" Variant="Variant.Text" />
                        <MudNumericField Immediate="true" @bind-Value="number.EarValue" Label="Ohrmarkennummer:" Variant="Variant.Text" />
                    </MudItem>
                }
                <MudItem xs="5"></MudItem>
                <MudItem xs="2">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddNumberField" />
                </MudItem>
                <MudItem xs="5"></MudItem>
            </MudGrid>
                <MudDatePicker Label="Verabreichungsdatum:" Editable="true" @bind-Date="NullDate" />

                <MudAutocomplete T="string" Label="Medikament:" @bind-Value="MedicineName" SearchFunc="@((string s, CancellationToken c) => cowTreatmentService.SearchCowTreatmentMedicaments(s , c, medicineService))" CoerceValue="true" />

                <MudAutocomplete T="string" Label="Wie / Wo:" @bind-Value="Cow_Treatment.WhereHow" SearchFunc="@((string s, CancellationToken c) => cowTreatmentService.SearchCowTreatmentWhereHow(s , c))" CoerceValue="true" />

                <MudNumericField @bind-Value="Cow_Treatment.MedicineDosage" Label="Menge:" Variant="Variant.Text" />

                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SaveCowTreatmentModalInput">Speichern</MudButton>

            </MudStack>
    </DialogContent>
</MudDialog>



@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    
    [Parameter]
    public CowTreatment Cow_Treatment { get; set; } = new CowTreatment();
    
    public DateTime? NullDate;
    public bool SaveSuccesfulBool;
    public string MedicineName;

    protected override void OnInitialized()
    {
        if(!string.IsNullOrEmpty(Cow_Treatment.EarTagNumber))
        {
            numbers.Add(new NumberEntry(cowService.GetCollarNumberByEarTagNumber(Cow_Treatment.EarTagNumber), Cow_Treatment.EarTagNumber));
            MedicineName = medicineService.GetMedicineNameById(Cow_Treatment.MedicineId);
        }
        else
        {
            numbers.Add(new NumberEntry());
        }
        NullDate = DateTime.Now;
    }

    List<NumberEntry> numbers = new List<NumberEntry>();

    private void AddNumberField()
    {
        numbers.Add(new NumberEntry());
    }

    public void GetEarNumber(NumberEntry entry)
    {
        var index = numbers.IndexOf(entry);
        numbers[index].EarValue = entry.Value.HasValue ? cowService.GetEarTagNumberByCollarNumber(entry.Value.Value) : null;
        StateHasChanged();
    }

    public async Task SaveCowTreatmentModalInput()
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        var medicineId = await medicineService.GetMedicineIdByName(MedicineName);
        foreach (var number in numbers)
        {
            if (number.Value.HasValue && number.Value != 0 && !string.IsNullOrEmpty(number.EarValue))
            {
                var newTreatment = new CowTreatment()
                    {
                        EarTagNumber = number.EarValue,
                        MedicineId = medicineId,
                        MedicineDosage = Cow_Treatment.MedicineDosage,
                        WhereHow = Cow_Treatment.WhereHow,
                        AdministrationDate = NullDate.Value
                    };

                bool saveSuccessful = await cowTreatmentService.InsertDataAsync(newTreatment);
                if (!saveSuccessful)
                {
                    Snackbar.Add($"Speichern fehlgeschlagen bei Halsbandnummer {number.Value}!", Severity.Error);
                    return;
                }
                else
                {
                    Snackbar.Add($"Alle Behandlungen erfolgreich gespeichert!", Severity.Success);
                }
            }
            else
            {
                Snackbar.Add($"Speichern fehlgeschlagen, Hals- & Ohrmarkennummer dürfen nicht 0 sein!", Severity.Error);
                return;
            }
        }
        MudDialog.Close();
    }

}

