@inject ISnackbar Snackbar
@inject CowTreatmentService cowTreatmentService
@inject CowService cowService
@inject MedicineService medicineService
@inject WhereHowService WhereHowService
@inject IDialogService DialogService
@inject UdderService UdderService

<MudDialog>
    <DialogContent>
            <MudStack>
                <MudText Class="table-Header" Align="Align.Center" Typo="Typo.h3">Kuh Behandlung hinzufügen</MudText>

            <MudGrid>
                @foreach (var number in numbers)
                {
                    <MudItem xs="12">
                        <MudNumericField Immediate="true" @bind-Value="number.Value" TextChanged="@((string s) => GetEarNumber(number))" Label="Halsbandnummer:" Variant="Variant.Text" />
                        <MudAutocomplete TextChanged="() => GetCollarNumber(number)" SearchFunc="cowService.SearchCowEarTagNumbers" ResetValueOnEmptyText="true" Immediate="true" @bind-Value="number.EarValue" Label="Ohrmarkennummer:" Variant="Variant.Text" />
                    </MudItem>
                }
                <MudItem xs="5"></MudItem>
                <MudItem xs="2">
                    <MudIconButton Icon="@Icons.Material.Filled.Add" OnClick="AddNumberField" />
                </MudItem>
                <MudItem xs="5"></MudItem>
            </MudGrid>
                <MudDatePicker Label="Verabreichungsdatum:" Editable="true" @bind-Date="NullDate" />

                <MudAutocomplete SelectValueOnTab="true" T="string" Label="Medikament:" @bind-Value="MedicineName" SearchFunc="@((string s, CancellationToken c) => cowTreatmentService.SearchCowTreatmentMedicaments(s , c, medicineService))" CoerceValue="true" />

                <div style="width: 100%; display: flex; justify-content: center; align-items:  center; gap:  2.5%;">
                    <MudAutocomplete CoerceText="true" Immediate="true" TextChanged="(string s) => OpenWhereHowDialog(s)" SelectValueOnTab="true" T="string" Label="Wie / Wo:" @bind-Value="_selectedWhereHow" SearchFunc="@((string s, CancellationToken c) => cowTreatmentService.SearchCowTreatmentWhereHow(s , c))" CoerceValue="true" />
                    @if (showEditWhereHowOptions)
                    {
                        <MudToggleIconButton @bind-Toggled="ShowDialogForNewWhereHow"
                                             Icon="@Icons.Material.Filled.Window"
                                             Color="@Color.Default"
                                             ToggledIcon="@Icons.Material.Filled.Window"
                                             ToggledColor="@Color.Success"/> 
                        
                        <MudIconButton Icon="@Icons.Material.Filled.Save" Color="Color.Primary" OnClick="SaveNewWhereHow"/>
                    }else if (showDialog)
                    {
                        <MudIconButton Icon="@Icons.Material.Filled.OpenInNew" Color="Color.Primary" OnClick="OpenUdderDialog"/>
                    }
                </div>

                <MudNumericField @bind-Value="Cow_Treatment.MedicineDosage" Label="Menge:" Variant="Variant.Text" />

                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SaveCowTreatmentModalInput">Speichern</MudButton>

            </MudStack>
    </DialogContent>
</MudDialog>



@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    
    [Parameter]
    public CowTreatment Cow_Treatment { get; set; } = new CowTreatment();
    
    public DateTime? NullDate;
    public bool SaveSuccesfulBool;
    public string MedicineName;
    private string _selectedWhereHow = "";
    private bool showEditWhereHowOptions = false;
    private bool ShowDialogForNewWhereHow = false;
    private bool showDialog = false;
    private int _selectedUdder = int.MinValue;
    
    protected override void OnInitialized()
    {
        if(!string.IsNullOrEmpty(Cow_Treatment.EarTagNumber))
        {
            numbers.Add(new NumberEntry(cowService.GetCollarNumberByEarTagNumber(Cow_Treatment.EarTagNumber), Cow_Treatment.EarTagNumber));
            MedicineName = medicineService.GetMedicineNameById(Cow_Treatment.MedicineId);
        }
        else
        {
            numbers.Add(new NumberEntry());
        }
        NullDate = DateTime.Now;
        if (Cow_Treatment.WhereHowId != int.MinValue)
        {
            _selectedWhereHow = WhereHowService.GetWhereHowNameById(Cow_Treatment.WhereHowId);
        }
    }

    List<NumberEntry> numbers = new List<NumberEntry>();

    private void AddNumberField()
    {
        numbers.Add(new NumberEntry());
    }

    public void GetEarNumber(NumberEntry entry)
    {
        var index = numbers.IndexOf(entry);
        numbers[index].EarValue = entry.Value.HasValue ? cowService.GetEarTagNumberByCollarNumber(entry.Value.Value) : null;
        StateHasChanged();
    }
    
    private void GetCollarNumber(NumberEntry entry)
    {
        var index = numbers.IndexOf(entry);
        numbers[index].Value = entry.EarValue != null ? cowService.GetCollarNumberByEarTagNumber(entry.EarValue) : null;
        StateHasChanged();
    }

    public async Task SaveCowTreatmentModalInput()
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        var medicineId = await medicineService.GetMedicineIdByName(MedicineName);
        var whereHowId = await WhereHowService.GetWhereHowIDByName(_selectedWhereHow);
        if (medicineId == int.MinValue)
        {
             Snackbar.Add("Medikament nicht gefunden!", Severity.Error);
             return;
        }

        if (whereHowId == int.MinValue)
        {
            Snackbar.Add("Wie/Wo nicht gefunden!", Severity.Error);
            return;
        }
        Cow_Treatment.UdderId = (Cow_Treatment.UdderId == int.MinValue ? await UdderService.GetIdForNoQuarters() : Cow_Treatment.UdderId);
        foreach (var number in numbers)
        {
            if (number.Value.HasValue && number.Value != 0 && !string.IsNullOrEmpty(number.EarValue))
            {
                var newTreatment = new CowTreatment()
                    {
                        EarTagNumber = number.EarValue,
                        MedicineId = medicineId,
                        MedicineDosage = Cow_Treatment.MedicineDosage,
                        WhereHowId = whereHowId,
                        AdministrationDate = NullDate.Value,
                        UdderId = Cow_Treatment.UdderId,
                    };

                bool saveSuccessful = await cowTreatmentService.InsertDataAsync(newTreatment);
                if (!saveSuccessful)
                {
                    Snackbar.Add($"Speichern fehlgeschlagen bei Halsbandnummer {number.Value}!", Severity.Error);
                    return;
                }
                else
                {
                    Snackbar.Add($"Alle Behandlungen erfolgreich gespeichert!", Severity.Success);
                }
            }
            else
            {
                Snackbar.Add($"Speichern fehlgeschlagen, Hals- & Ohrmarkennummer dürfen nicht 0 sein!", Severity.Error);
                return;
            }
        }
        MudDialog.Close();
    }

    private async Task OpenWhereHowDialog(string text)
    {
        if (WhereHowService.WhereHows.Values.Where(x => x.WhereHowName.Trim().ToLower() == text.ToLower().Trim()).Select(x => x.ShowDialog).FirstOrDefault())
        {
            showDialog = true;
            showEditWhereHowOptions = false;
        }
        else if (WhereHowService.WhereHowNames.Any(x => x.ToLower().Trim() == text.Trim().ToLower()) || string.IsNullOrEmpty(text))
        {
            showEditWhereHowOptions = false;
        }
        else
        {
            showEditWhereHowOptions = true;
        }
    }

    private async Task OpenUdderDialog()
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, NoHeader = true };
        var dialog = await DialogService.ShowAsync<UdderDialog>("", options);
        var result = await dialog.Result;
        if (!result.Canceled && result.Data is int id && id != int.MinValue)
        {
            showDialog = false;
            Cow_Treatment.UdderId = id;
        }
        else
        {
            Cow_Treatment.UdderId = await UdderService.GetIdForNoQuarters();
        }
    }
    
    private async Task SaveNewWhereHow()
    {
        if (string.IsNullOrEmpty(_selectedWhereHow))
        {
            Snackbar.Add("Wie / Wo ist Leer!", Severity.Error);
            return;
        }
        
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, NoHeader = true };
        var parametersGeneric = new DialogParameters<GenericDialog> { { x => x.HeaderText, "Speichern" }, { x => x.Description, $"Wollen Sie {_selectedWhereHow} als Wie / Wo speichern? ?" }, { x => x.AcceptButtonText, "Ja" }, { x => x.CancelButtonText, "Nein" }, { x => x.ColorScheme, Color.Warning } };
        var dialog = await DialogService.ShowAsync<GenericDialog>("",parametersGeneric, options);
        var result = await dialog.Result;

        if (!result.Canceled)
        {
            var newWhereHow = new WhereHow
            {
                WhereHowName = _selectedWhereHow,
                ShowDialog = ShowDialogForNewWhereHow
            };
            await WhereHowService.InsertDataAsync(newWhereHow);
            if (ShowDialogForNewWhereHow)
            {
                await OpenUdderDialog();
            }
            else
            {
                Cow_Treatment.UdderId = await UdderService.GetIdForNoQuarters();
            }

            showEditWhereHowOptions = false;
        }
    }
}

