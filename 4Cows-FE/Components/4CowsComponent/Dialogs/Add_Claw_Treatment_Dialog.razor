@inject ISnackbar Snackbar
@inject ClawTreatmentService clawTreatmentService
@inject CowService cowService

<MudDialog>
    <DialogContent>
            <MudStack>
                <MudText Class="table-Header" Align="Align.Center" Typo="Typo.h3">Klauen Behandlung hinzufügen</MudText>

                <MudNumericField TextChanged="(string s) => UpdateEarTagNumber(s)" @bind-Value="CollarNumber" Label="Halsbandnummer:" Immediate="true" Variant="Variant.Text" />
                <MudAutocomplete TextChanged="(string s) => GetCollarNumber(s)" SearchFunc="cowService.SearchCowEarTagNumbers" ResetValueOnEmptyText="true" Immediate="true" @bind-Value="Claw_Treatment.EarTagNumber" Label="Ohrmarkennummer:" Variant="Variant.Text" />

                <MudDatePicker Label="Behandlungsdatum:" Editable="true" @bind-Date="NullDate" />
            <MudContainer MaxWidth="MaxWidth.ExtraSmall" id="Claw_Treatment_Modal" class="@(showTreatmentModal ? "showTreatmentModal" : "hideTreatmentModal")">
                        <MudStack Justify="Justify.Center" >
                        <MudText Align="Align.Center" Typo="Typo.h5">@($"Klauen Behandlung {currentClaw}")</MudText>
                        @if (currentClaw == "LV")
                        {
                            <MudAutocomplete T="string" Label="Befund:" @bind-Value="Claw_Treatment.ClawFindingLV" SearchFunc="@Search_Claw_Treatment_Claw_Finding" CoerceValue="true" />
                            <MudCheckBox Label="Verband:" @bind-Value="@Claw_Treatment.BandageLV" Size="Size.Medium" Color="Color.Primary"></MudCheckBox>
                            <MudCheckBox Label="Klotz:" @bind-Value="@Claw_Treatment.BlockLV" Size="Size.Medium" Color="Color.Primary"></MudCheckBox>
                        }
                        else if (currentClaw == "LH")
                        {
                        <MudAutocomplete T="string" Label="Befund:" @bind-Value="Claw_Treatment.ClawFindingLH" SearchFunc="@Search_Claw_Treatment_Claw_Finding" CoerceValue="true" />
                        <MudCheckBox Label="Verband:" @bind-Value="@Claw_Treatment.BandageLH" Size="Size.Medium" Color="Color.Primary"></MudCheckBox>
                        <MudCheckBox Label="Klotz:" @bind-Value="@Claw_Treatment.BlockLH" Size="Size.Medium" Color="Color.Primary"></MudCheckBox>
                        }
                        else if (currentClaw == "RV")
                        {
                        <MudAutocomplete T="string" Label="Befund:" @bind-Value="Claw_Treatment.ClawFindingRV" SearchFunc="@Search_Claw_Treatment_Claw_Finding" CoerceValue="true" />
                        <MudCheckBox Label="Verband:" @bind-Value="@Claw_Treatment.BandageRV" Size="Size.Medium" Color="Color.Primary"></MudCheckBox>
                        <MudCheckBox Label="Klotz:" @bind-Value="@Claw_Treatment.BlockRV" Size="Size.Medium" Color="Color.Primary"></MudCheckBox>
                        }
                        else if (currentClaw == "RH")
                        {
                        <MudAutocomplete T="string" Label="Befund:" @bind-Value="Claw_Treatment.ClawFindingRH" SearchFunc="@Search_Claw_Treatment_Claw_Finding" CoerceValue="true" />
                        <MudCheckBox Label="Verband:" @bind-Value="@Claw_Treatment.BandageRH" Size="Size.Medium" Color="Color.Primary"></MudCheckBox>
                        <MudCheckBox Label="Klotz:" @bind-Value="@Claw_Treatment.BlockRH" Size="Size.Medium" Color="Color.Primary"></MudCheckBox>
                        }
                <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="CloseClawTreatmentModal">Schließen</MudButton>
            </MudStack>
            </MudContainer>
                        <div id="Hoof_Input_Grid">
                            <button type="button" id="LV_HOOF" class="Hoof_Input" onclick="@(() => SetCurrentClaw("LV"))"></button>
                            <button type="button" id="RV_HOOF" class="Hoof_Input" onclick="@(() => SetCurrentClaw("RV"))"></button>
                            <button type="button" id="LH_HOOF" class="Hoof_Input" onclick="@(() => SetCurrentClaw("LH"))"></button>
                            <button type="button" id="RH_HOOF" class="Hoof_Input" onclick="@(() => SetCurrentClaw("RH"))"></button>
                        </div>
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="@SaveClawTreatmentModalInput">Speichern</MudButton>
            </MudStack>
    </DialogContent>
</MudDialog>



@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public ClawTreatment Claw_Treatment { get; set; } = new ClawTreatment();

    public DateTime? NullDate;
    public string currentClaw = "";
    public bool SaveSuccesfulBool;
    public bool showTreatmentModal = false;
    public int CollarNumber;

    protected override void OnInitialized()
    {
        if (!string.IsNullOrEmpty(Claw_Treatment.EarTagNumber))
        {
            CollarNumber = cowService.GetCollarNumberByEarTagNumber(Claw_Treatment.EarTagNumber);
        }
        NullDate = DateTime.Today;
    }

    public void SetCurrentClaw(string InputClaw)
    {
        currentClaw = InputClaw;
        showTreatmentModal = true;
    }

    public void CloseClawTreatmentModal()
    {
        showTreatmentModal = false;
    }

    public async Task SaveClawTreatmentModalInput()
    {
        Snackbar.Configuration.SnackbarVariant = Variant.Outlined;
        Snackbar.Configuration.MaxDisplayedSnackbars = 10;
        if (TestForNullInput())
        {
            Claw_Treatment.TreatmentDate = NullDate.Value;
            Claw_Treatment.EarTagNumber = cowService.GetEarTagNumberByCollarNumber(CollarNumber);
            if (Claw_Treatment.EarTagNumber == string.Empty)
            {
                Snackbar.Add($"Halsbandnummer {CollarNumber} nicht gefunden!", Severity.Error);
                return;
            }
            SaveSuccesfulBool = await clawTreatmentService.InsertDataAsync(Claw_Treatment);
            MudDialog.Close();
            Claw_Treatment = new ClawTreatment();
            Claw_Treatment.TreatmentDate = DateTime.Now;
            if (SaveSuccesfulBool)
            {
                Snackbar.Add($"Speichern erfolgreich!", Severity.Success);
            }
            else
            {
                Snackbar.Add($"Speichern fehlgeschlagen!", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add($"Alle Felder müssen ausgefüllt werden!", Severity.Error);
        }
    }

    private bool TestForNullInput()
    {
        var returnBool = false;
        if (string.IsNullOrEmpty(Claw_Treatment.ClawFindingLV))
        {
            Claw_Treatment.ClawFindingLV = "Pflege";
        }
        if (string.IsNullOrEmpty(Claw_Treatment.ClawFindingRV))
        {
            Claw_Treatment.ClawFindingRV = "Pflege";
        }
        if (string.IsNullOrEmpty(Claw_Treatment.ClawFindingLH))
        {
            Claw_Treatment.ClawFindingLH = "Pflege";
        }
        if (string.IsNullOrEmpty(Claw_Treatment.ClawFindingRH))
        {
            Claw_Treatment.ClawFindingRH = "Pflege";
        }
        returnBool =  NullDate != null && !string.IsNullOrEmpty(Claw_Treatment.ClawFindingLV) && !string.IsNullOrEmpty(Claw_Treatment.ClawFindingLH) && !string.IsNullOrEmpty(Claw_Treatment.ClawFindingRV) && !string.IsNullOrEmpty(Claw_Treatment.ClawFindingRH);
        return returnBool;
    }

    private async Task<IEnumerable<string>> Search_Claw_Treatment_Claw_Finding(string value, CancellationToken token)
    {
        await Task.Delay(0);
        if (string.IsNullOrEmpty(value))
        {
            return clawTreatmentService.ClawFindingList;
        }
        return clawTreatmentService.ClawFindingList.Where(x => x.Contains(value, StringComparison.InvariantCultureIgnoreCase));
    }
    
    private void GetCollarNumber(string earTag)
    {
        CollarNumber = !string.IsNullOrEmpty(earTag) ? cowService.GetCollarNumberByEarTagNumber(earTag) : 0;
        StateHasChanged();
    }
    
    private void UpdateEarTagNumber(string collarNumber)
    {
        Claw_Treatment.EarTagNumber = cowService.GetEarTagNumberByCollarNumber(Convert.ToInt32(collarNumber));
        StateHasChanged();
    }
}

