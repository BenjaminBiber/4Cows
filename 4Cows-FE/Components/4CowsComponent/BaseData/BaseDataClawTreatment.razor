@using _4Cows_FE.Components._4CowsComponent.Dialogs
@inject CowService CowService
@inject ClawTreatmentService ClawTreatmentService
@inject IDialogService DialogService

<MudTable Elevation="5" Dense="true" Items="@Treatment_Claws" Hover="true" Striped="@true" Filter="new Func<ClawTreatment,bool>(ClawFilterFunc1)">
    <ToolBarContent>
        <MudSpacer/>
        <MudTextField @bind-Value="searchClaw" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortBy="new Func<int, object>(x=>x)">Halsbandnummer</MudTableSortLabel></MudTh>
        <MudTh><MudTableSortLabel SortBy="new Func<ClawTreatment, object>(x=>x.TreatmentDate)">Datum</MudTableSortLabel></MudTh>
    </HeaderContent>

    <RowTemplate>
        <MudTd DataLabel="Halsbandnummer">@CowService.GetCollarNumberByEarTagNumber(context.EarTagNumber)</MudTd>
        <MudTd DataLabel="Datum">@context.TreatmentDate.ToString("dd.MM.yyyy")</MudTd>
        <MudTd>
            <MudButton Variant="Variant.Filled" Size="Size.Small" OnClick="@(() => DeleteClawTreatment(context))" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error">Behandlung Löschen</MudButton>
        </MudTd>
    </RowTemplate>

    <PagerContent>
        <MudTablePager RowsPerPageString="Behandlungen pro Seite" PageSizeOptions="new int[]{25, 50, 100}" />
    </PagerContent>
</MudTable>

@code {
    private string searchClaw = "";
    private List<ClawTreatment> Treatment_Claws = new List<ClawTreatment>();
    
    private bool ClawFilterFunc1(ClawTreatment Treatment_Cow) => FilterFuncClaw(Treatment_Cow, searchClaw);

    private bool FilterFuncClaw(ClawTreatment Treatment_Cow, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (CowService.GetCollarNumberByEarTagNumber(Treatment_Cow.EarTagNumber).ToString() == searchString)
            return true;
        return false;
    }
    
    private async Task DeleteClawTreatment(ClawTreatment Treatment_Cow)
    {
        var options = new DialogOptions { MaxWidth = MaxWidth.Medium, FullWidth = true, NoHeader = true };
        var parametersGeneric = new DialogParameters<GenericDialog> { { x => x.HeaderText, "Löschen" }, { x => x.Description, "Wollen Sie die Behandlung wirklich Löschen?" }, { x => x.AcceptButtonText, "Ja" }, { x => x.CancelButtonText, "Nein" }, { x => x.ColorScheme, Color.Error } };
        var dialog = await DialogService.ShowAsync<GenericDialog>("",parametersGeneric, options);
        var result = await dialog.Result;
        if (!result.Canceled)
        {
            await ClawTreatmentService.DeleteDataAsync(Treatment_Cow.ClawTreatmentId);
            await ClawTreatmentService.GetAllDataAsync();
            Treatment_Claws = ClawTreatmentService.GetClawTreatments();
        }
        
    }
    
    protected override async Task OnInitializedAsync()
    {
        await ClawTreatmentService.GetAllDataAsync();
        Treatment_Claws = ClawTreatmentService.GetClawTreatments();
    }
}