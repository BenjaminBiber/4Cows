@inherits MudDialog
@using System.Net.Http
@using System.Net.Http.Headers
@using System.Threading.Tasks
@using Newtonsoft.Json
@using MudBlazor
@inject ISnackbar Snackbar;
<MudDialog>
    <DialogContent>
        @if (gettingData)
        {
            <MudProgressCircular Indeterminate="true" />
        }
        else
        {
            <MudText Typo="Typo.h5">Software Version</MudText>
            <MudText>@($"Installiertes Update: {currentVersion}") </MudText>
            <MudText>@($"Aktuellestes Update: {latestVersion}") </MudText>

            @if (updateRequired)
            {
                <MudText Typo="Typo.h6" Color="Color.Error">Update ist Nötig</MudText>
            }
            else
            {
                <MudText Typo="Typo.h6" Color="Color.Success">Update nicht Nötig</MudText>
            }
        }
    </DialogContent>
    <DialogActions>
        <MudButton Disabled="!updateRequired" Color="Color.Success" OnClick="UpdateSoftware">Update</MudButton>
        <MudButton OnClick="Cancel">Schließen</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    void Submit() => MudDialog.Close(DialogResult.Ok(true));
    void Cancel() => MudDialog.Cancel();
    private static readonly HttpClient client = new HttpClient();

    private static string owner = "BenjiIstAmKochen";
    private static string repo = "4CowsUpdateVersions";
    private static string path = "";
    private static string currentVersion = "v0.0.0";
    private bool gettingData = true;
    private string latestVersion = "";
    private bool updateRequired = false;

    protected override async Task OnInitializedAsync()
    {
        await GetVersions();
    }

    async Task GetVersions()
    {
        string url = $"https://api.github.com/repos/{owner}/{repo}/contents/{path}";
        client.DefaultRequestHeaders.UserAgent.Add(new ProductInfoHeaderValue("CSharpApp", "1.0"));

        try
        {
            gettingData = true;
            string jsonResponse = await client.GetStringAsync(url);

            var contents = JsonConvert.DeserializeObject<List<RepositoryContent>>(jsonResponse);

            var versions = new List<string>();
            if (contents != null)
            {
                foreach (var content in contents)
                {
                    if (content.Type == "dir" && content.Name.StartsWith("v"))
                    {
                        versions.Add(content.Name);
                    }
                }
            }

            if (versions.Count == 0)
            {
                Snackbar.Add("No version folders found.", Severity.Error);
                return;
            }

            latestVersion = versions.OrderByDescending(v => v, new VersionComparer()).First();

            updateRequired = VersionComparer.CompareVersions(currentVersion, latestVersion) < 0;
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"Request error: {e.Message}");
        }
        catch (Exception e)
        {
            Console.WriteLine($"An error occurred: {e.Message}");
        }
        finally
        {
            gettingData = false;
        }
    }

    class RepositoryContent
    {
        public string Name { get; set; }
        public string Path { get; set; }
        public string Type { get; set; }
    }

    public class VersionComparer : IComparer<string>
    {
        public int Compare(string version1, string version2)
        {
            return CompareVersions(version1, version2);
        }

        public static int CompareVersions(string version1, string version2)
        {
            version1 = version1.TrimStart('v');
            version2 = version2.TrimStart('v');

            string[] parts1 = version1.Split('.');
            string[] parts2 = version2.Split('.');

            for (int i = 0; i < Math.Max(parts1.Length, parts2.Length); i++)
            {
                if (!int.TryParse(parts1.ElementAtOrDefault(i), out int part1))
                {
                    part1 = 0;
                }
                if (!int.TryParse(parts2.ElementAtOrDefault(i), out int part2))
                {
                    part2 = 0;
                }

                if (part1 < part2)
                {
                    return -1;
                }
                else if (part1 > part2)
                {
                    return 1;
                }
            }

            return 0;
        }
    }

    void UpdateSoftware()
    {
        currentVersion = latestVersion;
        StateHasChanged();
    }
}
