@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Net.Http;
@using System.Net.Http.Headers;
@using System.Threading.Tasks;
@using Newtonsoft.Json;

@code {
    private static readonly HttpClient client = new HttpClient();

    static async Task Main(string[] args)
    {
        string owner = "BenjiIstAmKochen";
        string repo = "4CowsUpdateVersions"; 
        string path = "";
        string currentVersion = "";

        string url = $"https://api.github.com/repos/{owner}/{repo}/contents/{path}";

        client.DefaultRequestHeaders.UserAgent.Add(new ProductInfoHeaderValue("CSharpApp", "1.0"));

        try
        {
            Console.WriteLine("Fetching repository contents...");
            string jsonResponse = await client.GetStringAsync(url);

            var contents = JsonConvert.DeserializeObject<List<RepositoryContent>>(jsonResponse);

            var versions = new List<string>();
            if(contents != null)
            {
                foreach (var content in contents)
                {
                    if (content.Type == "dir" && content.Name.StartsWith("v"))
                    {
                        versions.Add(content.Name);
                    }
                }
            }

            if (versions.Count == 0)
            {
                Console.WriteLine("No version folders found.");
                return;
            }

            string latestVersion = versions.OrderByDescending(v => v, new VersionComparer()).First();

            Console.WriteLine($"Latest version found: {latestVersion}");

            if (VersionComparer.CompareVersions(currentVersion, latestVersion) < 0)
            {
                Console.WriteLine("Update required.");
            }
            else
            {
                Console.WriteLine("Version is up to date.");
            }
        }
        catch (HttpRequestException e)
        {
            Console.WriteLine($"Request error: {e.Message}");
        }
        catch (Exception e)
        {
            Console.WriteLine($"An error occurred: {e.Message}");
        }

        Console.ReadKey();
    }

    class RepositoryContent
    {
        public RepositoryContent()
        {
        }

        public string Name { get; set; }
        public string Path { get; set; }
    public string Type { get; set; }


}

public class VersionComparer : IComparer<string>
{
    public int Compare(string version1, string version2)
    {
        return CompareVersions(version1, version2);
    }

    public static int CompareVersions(string version1, string version2)
    {
        version1 = version1.TrimStart('v');
        version2 = version2.TrimStart('v');

        string[] parts1 = version1.Split('.');
        string[] parts2 = version2.Split('.');

        for (int i = 0; i < Math.Max(parts1.Length, parts2.Length); i++)
        {
            int part1 = i < parts1.Length ? Convert.ToInt32(parts1[i]) : 0;
            int part2 = i < parts2.Length ? Convert.ToInt32(parts2[i]) : 0;

            if (part1 < part2)
            {
                return -1;
            }
            else if (part1 > part2)
            {
                return 1;
            }
        }

        return 0;
    }
}
}
